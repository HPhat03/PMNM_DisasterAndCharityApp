I. CHUẨN BỊ
    Các tool cần dùng để test:
    + Visual Studio Code, Notepad++ 
    + Eclipse 2020
    + Web: 172.16.0.85 để kiểm tra luồng chạy của action
    + Database MySQL: 
        172.16.0.85
        u/p: root/Kr@ck1234
        db name: krack-test
    + WinScp: 172.16.0.85
        User: root
        Pass: root
    
1. Dùng visual studio code để XEM source code và VIẾT file test, không sử dụng eclipse vì sẽ bị mã hóa tiếng nhật
    Example:
        source code: kr\core\application\modules\default\controllers\IndexController.php
        file test: kr\library\tests\test\core\application\modules\default\controllers\IndexControllerTest.php
        class test: IndexControllerTest
    Trong trường hợp cần test cho trường hợp đặc của IndexController thì tạo theo format IndexController_[nội dung cần test]_Test
2. Sau đó, dùng Eclipse để chạy các file test 
    Mở Eclipse: vào thư mục cài đặt eclipse rồi chạy file eclipse.exe
    Thao tác:
        Chuột phải vào folder Library -> run as -> php Unit test
        
3. Mở file coverage để xem code phủ tới đâu
    Vị trí file coverage: kr\library\coverage
    LƯU Ý: Sau khi chạy file test lần đầu mới tạo ra thư mục covergage
    Tip: có thể copy thư mục coverage sang một thư mục khác để lưu tiến trình chạy 
    và so sánh với tiến trình hiện tại để biết được những đoạn code cần phải test
    
4. Có thể kiểm tra tên action và controller trên database krack-test ở table function-mapping-request-master 
    Lưu ý: tên database là krack-test
    Example: SELECT * FROM `krack-test`.function_mapping_request_master where controller_identifier='index'
    (Optional) Nếu code bị lỗi và không biết cách fix, có thể dùng WinScp dùng để kiểm tra xem source PT, 30 và source 85 có giống nhau hay không
    
5. Những trường hợp sau khi chạy testcase:
    . : 1 chấm tương ứng 1 testcase đã viết
    E : testcase bị lỗi code, lỗi có thể do truyền data sai hoặc code sai 
    W : Warning - kiểm tra xem đã có testcase nào đang chạy chưa, hoặc lỗi code báo warning
    R : lỗi này thường xuất hiện khi testcase thiếu $this->assertTrue(true);
    
BẮT ĐẦU TEST
II. VIẾT TEST CASE:
EXAMPLE:            (1)
    public function testSearchThreadAction() {
            // Post params
        (2) $params = [
            'headerAuth' => 'ad',
            'searchKeyword' => '',
            ];

            // new CourseApplicationController
        (3) $this->mockDispatch('/flm/course/init-search', $params);
            $this->_controller->initSearchAction();

        (4) $this->mockDispatch('/flm/course/search',$params);
            $this->_controller->searchAction();
            
            $this->mockDispatch('/flm/course/return-search',$params);
            $this->_controller->returnSearchAction();

        (5) $this->assertTrue(true);
    }

(1): Tên test case phải có chữ 'test' đầu tiên thì mới chạy testcase được
(2): $params này dùng để truyền tham số ở trên form vào controller.
     Các biến cần truyền thông thường có dạng _formData['searchKeyword'];
(3): $this->mockDispatch này dùng để gọi controller và action (ở ví dụ trên thì tên controller là course và action là 'init-search'  
     mockDispatch thường đi cặp với  $this->_controller->initSearchAction();
     initSearchAction() là function được khai báo trong controller ở file controller source
(4): Có những action cần data ở những action trước thì phải chạy action theo luồng trên 172.16.0.85/flm
     Ở ví dụ trên thì muốn tới seachAction() thì cần phải đi qua initSearchActiont trước.
(5): Mọi testcase đều cần $this->assertTrue(true); để chạy testcase.
     CHÚ Ý: nếu không có thì trên eclipse sẽ xuất lỗi R
     
III. CÁC KỸ THUẬT TEST

1. Runkit7 dùng để chỉnh sửa lại function (có thể là function của thư viện) để trả về data mà mình mong muốn
     +redefine method: dùng đế sửa lại return các method của các class
     +redefine constant: dùng để sửa lại giá trị hằng
     +redefine function: dùng để sửa lại return của các function của php

    Example testcase redefine method: 
        public function testIndexAction_ShowLinkToNoticeList_True() {
            (1) runkit7_method_copy('IndexModel', 'selectNoticeInfoCount_bk', 'IndexModel', 'selectNoticeInfoCount');
            (2) runkit7_method_redefine('IndexModel','selectNoticeInfoCount','$data','return $data = ["emergency"=>8,"other"=>1];', RUNKIT_ACC_PUBLIC);

            //Start test
            $this->mockDispatch('/flm/index/index');
            $this->_controller->indexAction();

            $this->assertTrue(true);
            //End test

            (3) runkit7_method_remove('IndexModel','selectNoticeInfoCount');
            (4) runkit7_method_rename('IndexModel','selectNoticeInfoCount_bk','selectNoticeInfoCount');
        }
        
Trong đó: (1) Copy hàm `selectNoticeInfoCount` trong class `IndexModel` vào trong class `IndexModel` với tên `selectNoticeInfoCount_bk`.
          (2) Thay đổi nội dung hàm `selectNoticeInfoCount` trong class `IndexModel` với param là `$data` và nội dung hàm sẽ là `return $data = ["emergency"=>8,"other"=>1];`, loại hàm là public.
          (3) Sau khi chạy testcase xong, xóa hàm `selectNoticeInfoCount` ra khỏi class `IndexModel`
          (4) Trả lại hàm `selectNoticeInfoCount` như ban đầu từ hàm `selectNoticeInfoCount_bk`

          - IndexModel: tên class chứa function muốn thay đổi để phù hợp với testcase.
          - selectNoticeInfoCount_bk: backup lại function `selectNoticeInfoCount` trước khi thay đổi (dùng để revert lại sau khi chạy testcase)
          - selectNoticeInfoCount: function cần thay đổi nội dung
          - $data: là param của hàm
                Hint: có thể copy lại param của hàm đó.
          - return $data = ["emergency"=>8,"other"=>1];: nội dung hàm sau khi sửa.
                Hint: có thể viết hàm theo kiểu '
                    $func = <<<FUNC
                        // Nội dung hàm
                    FUNC;
          - RUNKIT_ACC_PUBLIC dùng cho hàm public, nếu là hàm static thì sẽ là RUNKIT_ACC_STATIC

Tham khảo thêm: https://www.php.net/manual/en/ref.runkit7.php

   1.1 Example testcase redefine method làm giả object class:

        public function testDownloadFdfAction_DownloadResultNotValid() {
            $this->mockDispatch('/flm/index/index',['applyReceiptNo' => 'f014090501481-90']);
            $this->_controller->indexAction(); 
            $this->mockDispatch('/flm/index/init-fdfdownload-material-list');
            $this->_controller->initFdfdownloadMaterialListAction();
            $this->mockDispatch('/flm/index/init-fdfdownload-fdf-list',['materialCode' => '333']);
            $this->_controller->initFdfdownloadFdfListAction();

            runkit7_method_copy('IndexModel', 'executeDownloadFdf_bk', 'IndexModel', 'executeDownloadFdf');
            runkit7_method_redefine('IndexModel','executeDownloadFdf','$a',
            '$a = new stdClass(); 
            $a->isValid = false; $a->data = null; $a->message = null; 
            return $a;', 
            RUNKIT_ACC_PUBLIC);

            $this->mockDispatch('/flm/index/download-fdf',
                                ['files'=>['upload_no' => '1']]);
            $this->_controller->downloadFdfAction();
            $this->assertTrue(true);

            runkit7_method_remove('IndexModel','executeDownloadFdf');
            runkit7_method_rename('IndexModel','executeDownloadFdf_bk','executeDownloadFdf');
        }
    
   1.2 Example testcase redefine method làm giả hàm insert của thư viện Zend
    
    public function _testIndexModel_executeDownloadFdfCount2()
    {
        $this->mockDispatch('/flm/index/index',['applyReceiptNo' => 'f014090501481-90']);
        $this->_controller->indexAction(); 
        $this->mockDispatch('/flm/index/init-fdfdownload-material-list');
        $this->_controller->initFdfdownloadMaterialListAction();
        $this->mockDispatch('/flm/index/init-fdfdownload-fdf-list',['materialCode' => '333']);
        $this->_controller->initFdfdownloadFdfListAction();
        
        runkit7_method_copy('Zend_Db_Adapter_Abstract', 'insert_bk', 'Zend_Db_Adapter_Abstract', 'insert');
        runkit7_method_redefine('Zend_Db_Adapter_Abstract','insert','$data','return $data = 2;', RUNKIT_ACC_PUBLIC);

        $this->mockDispatch('/flm/index/download-fdf',
        ['files'=>array('upload_no' => '1',
                        'materialCode'=>'333',
                        'uploadDatetime'=>'2023-04-12 12:56:00',
                        'filePath'=>'D:/PhapVo/Krack/kr/core/application/../../contents/flm/data/fdf/',
                        'fileName'=>'phapvo.txt',),
         'allCheck'=>1]);
        $this->_controller->downloadFdfAction();

        runkit7_method_remove('Zend_Db_Adapter_Abstract','insert');
        runkit7_method_rename('Zend_Db_Adapter_Abstract','insert_bk','insert');

        $this->assertTrue(true);
    }

2. SQL query: dùng khi muốn sửa lại 1 giá trị nào đó trên database krack-test trên MySQL

Lưu ý: khi dừng testcase đột ngột có thể dẫn đến chỉ thực thi 1 lệnh query mà không thực thi lệnh backup dẫn đến việc data chưa được khôi phục
Cách khắc phục: vào database để khôi phục lại

        Example testcase:        
                public function testMaterialDownloadAction_MediaPaper() {
                    $this->mockDispatch('/flm/index/index',['applyReceiptNo' => 'f014090501481-90']);
                    $this->_controller->indexAction();

                    $sql = "UPDATE `krack-test`.`material_master` 
                            SET `material_media` = '2' 
                            WHERE (`company_code` = 'flm') 
                            and (`material_code` = '333');"; (QUERY SQL)
                    $this->dumpSqlString($sql);  (THỰC THI CÂU QUERY)

                    $this->mockDispatch('/flm/index/init-material-download',);
                    $this->_controller->initMaterialDownloadAction();

                    $this->mockDispatch('/flm/index/init-fdfupload-material-list',);
                    $this->_controller->initFdfuploadMaterialListAction();

                    $this->assertTrue(true);       

                    $sql = "UPDATE `krack-test`.`material_master` 
                            SET `material_media` = '1' 
                            WHERE (`company_code` = 'flm') 
                            and (`material_code` = '333');";
                    $this->dumpSqlString($sql); (TRẢ LẠI DATA CŨ TRÊN DATABASE)
                }

3. SỬA FILE CONFIG: dùng khi muốn sửa lại giá trị của file config (Ex: kc_config.ini, menu.ini,...)

Lưu ý: khi dừng testcase đột ngột có thể dẫn đến nội dung trong file .ini không được khôi phục lại ban đầu. cần vào kiểm tra và thay đổi lại.

      
Example:    
    private function _deleteFiles($target) //Hàm dùng để delete files
    {
        if (is_dir($target)) {
            $files = glob($target . '{,.}[!.,!..]**', GLOB_MARK | GLOB_BRACE);
            foreach ($files as $file) {
                $this->_deleteFiles($file);
            }

            rmdir($target);
        } elseif (is_file($target)) {
            unlink($target);
        }
    }
    
    //Example: sửa giá trị customMenu trong file kc_config.ini
    public function testMenuListAction_CustomMenu() {
        $file = APPLICATION_PATH . '/../../configs/kc_config.ini';
        file_put_contents($file, str_replace('customMenu          = "0"', 'customMenu          = "1"', file_get_contents($file)));        $this->_deleteFiles(APPLICATION_PATH . '/../../cache_file/');
        $this->_deleteFiles(APPLICATION_PATH . '/../../cache_file/');
        mkdir(APPLICATION_PATH . '/../../cache_file/');

        $this->mockDispatch('/flm/index/menu-list');
        $this->_controller->menuListAction();
        $this->assertTrue(true);

        file_put_contents($file, str_replace('customMenu          = "1"', 'customMenu          = "0"', file_get_contents($file)));
        $this->_deleteFiles(APPLICATION_PATH . '/../../cache_file/');
        mkdir(APPLICATION_PATH . '/../../cache_file/');   
    }

4. SESSION TIMEOUT PROBLEM: thường xảy ra khi test preDispatch function

Example testcase:

    public function testDispatch(){
        require_once APPLICATION_PATH . '/../../core/application/modules/default/models/LoginModel.php';
        $loginModel = new LoginModel();
        $loginModel->updateLoginUserLastAccessDatetime('flm', 'ABV_PHAP1');
        
        $this->mockDispatch('/flm/index/menu-list');
        $this->_controller->preDispatch();
        $this->_controller->menuListAction();
        $this->_controller->postDispatch();
        $this->assertTrue(true);
    }
        

5. TẠO SESSION MỚI: 

        $appPaths      = explode(DIRECTORY_SEPARATOR, APPLICATION_PATH);
        $subSystemName = $appPaths[count($appPaths) - 2];
        $session          = new Zend_Session_Namespace($subSystemName);
        $session->initGetQrcode = new stdClass();
        $session->initGetQrcode->checkMfaSetting = false;
        $session->initGetQrcode->secretKey = '';
        $session->initGetQrcode->qrCode = '';

6. EXCEPTION_KC: khi chạy test bắt được lỗi Exception_KC thì try catch đoạn throw lỗi đó.

Lưu ý: phải kiểm soát được đây là case exception, thì mới try catch.

Example testcase:
    public function testMaterialDownloadAction_Exception_NotFoundApplyReceiptNo(){
        $this->mockDispatch('/flm/index/index');
        $this->_controller->indexAction();
        try {
            $this->mockDispatch('/flm/index/init-material-download', ['applyReceiptNo' => []]);
            $this->_controller->initMaterialDownloadAction();
        } catch (Exception_KC) {
            $this->assertTrue(true);
        }
    }
    
7. GET PARAMS TRÊN WEB 172.16.0.85 ĐỂ TRUYỀN VÀO _formData[];
    
   Lưu ý: (nên là form có data)
   1. lên trang Web 172.16.0.85/flm đăng nhập vào và vào đúng cái trang cần test
   2. F12 -> network tab -> ctrl + R
   3. Bấm vào action đầu tiên
   4. Chuyển qua tab payload
   5. Trừ hash ra còn lại lấy hết
   6. chuyển về array rồi truyền vào params


    
    
